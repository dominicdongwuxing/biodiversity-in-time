{"version":3,"sources":["webpack://test/./src/components/Tree.tsx","webpack://test/webpack/runtime/getFullHash"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAA0B;AACa;AACgD;AAChD;AACd;AACzB,mBAAmB,OAAO;AAC1B,gBAAgB,mDAAK;AACrB;AACA;AACA,wBAAwB;AACxB,kBAAkB,yCACI;AACtB;AACA;AACA;AACA,mBAAmB,2CACK;AACxB,wBAAwB,mCAAM;AAC9B;AACA,gEAAgE,uBAAuB,SAAS,0CACzE;AACvB,wBAAwB,qCACN,IAAI,sCAAS;AAC/B;AACA;AACA;AACA,4CAA4C,YAAY;AACxD;AACA,kBAAkB,wCAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,gDAAmB,SAAS;AACxC;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX,QAAQ,gDAAmB,OAAO,yBAAyB;AAC3D,QAAQ,gDAAmB,OAAO,sBAAsB;AACxD,QAAQ,gDAAmB,OAAO,sBAAsB;AACxD;AACA;AACA,KAAK,+CAA+C;AACpD,KAAK,gDAAgD;AACrD,KAAK,6CAA6C;AAClD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,6CAA6C;AAClD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD;AACe;AACf,YAAY,gDAAmB,SAAS,YAAY,0DAAW,EAAE;AACjE,QAAQ,gDAAmB;AAC3B,QAAQ,gDAAmB,6BAA6B,mFAAM;AAC9D;;;;;;;;;;;UCjGA,sD","file":"main.0d106691a6b3795371b2.hot-update.js","sourcesContent":["import React from \"react\";\nimport styles from \"./Tree.module.css\";\nimport myTree from \"../../../../dataset/wikidata/processed/dangling_trees/Q72288.json\";\nimport { useD3 } from \"../hooks/useD3\";\nimport * as d3 from \"d3\";\nfunction BarChart({ data }) {\n    const ref = useD3((svg) => {\n        const height = 500;\n        const width = 500;\n        const margin = { top: 20, right: 30, bottom: 30, left: 40 };\n        const x = d3\n            .scaleBand()\n            .domain(data.map((d) => d.year))\n            .rangeRound([margin.left, width - margin.right])\n            .padding(0.1);\n        const y1 = d3\n            .scaleLinear()\n            .domain([0, d3.max(data, (d) => d.sales)])\n            .rangeRound([height - margin.bottom, margin.top]);\n        const xAxis = (g) => g.attr(\"transform\", `translate(0,${height - margin.bottom})`).call(d3\n            .axisBottom(x)\n            .tickValues(d3\n            .ticks(...d3.extent(x.domain()), width / 40)\n            .filter((v) => x(v) !== undefined))\n            .tickSizeOuter(0));\n        const y1Axis = (g) => g\n            .attr(\"transform\", `translate(${margin.left},0)`)\n            .style(\"color\", \"steelblue\")\n            .call(d3.axisLeft(y1).ticks(null, \"s\"))\n            .call((g) => g.select(\".domain\").remove())\n            .call((g) => g\n            .append(\"text\")\n            .attr(\"x\", -margin.left)\n            .attr(\"y\", 10)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .text(data.y1));\n        svg.select(\".x-axis\").call(xAxis);\n        svg.select(\".y-axis\").call(y1Axis);\n        svg\n            .select(\".plot-area\")\n            .attr(\"fill\", \"steelblue\")\n            .selectAll(\".bar\")\n            .data(data)\n            .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d) => x(d.year))\n            .attr(\"width\", x.bandwidth())\n            .attr(\"y\", (d) => y1(d.sales))\n            .attr(\"height\", (d) => y1(0) - y1(d.sales));\n    }, [data.length]);\n    return (React.createElement(\"svg\", { ref: ref, style: {\n            height: 500,\n            width: \"100%\",\n            marginRight: \"0px\",\n            marginLeft: \"0px\",\n        } },\n        React.createElement(\"g\", { className: \"plot-area\" }),\n        React.createElement(\"g\", { className: \"x-axis\" }),\n        React.createElement(\"g\", { className: \"y-axis\" })));\n}\nconst data = [\n    { year: 1980, efficiency: 24.3, sales: 8949000 },\n    { year: 1985, efficiency: 27.6, sales: 10979000 },\n    { year: 1990, efficiency: 28, sales: 9303000 },\n    { year: 1991, efficiency: 28.4, sales: 8185000 },\n    { year: 1992, efficiency: 27.9, sales: 8213000 },\n    { year: 1993, efficiency: 28.4, sales: 8518000 },\n    { year: 1994, efficiency: 28.3, sales: 8991000 },\n    { year: 1995, efficiency: 28.6, sales: 8620000 },\n    { year: 1996, efficiency: 28.5, sales: 8479000 },\n    { year: 1997, efficiency: 28.7, sales: 8217000 },\n    { year: 1998, efficiency: 28.8, sales: 8085000 },\n    { year: 1999, efficiency: 28.3, sales: 8638000 },\n    { year: 2000, efficiency: 28.5, sales: 8778000 },\n    { year: 2001, efficiency: 28.8, sales: 8352000 },\n    { year: 2002, efficiency: 29, sales: 8042000 },\n    { year: 2003, efficiency: 29.5, sales: 7556000 },\n    { year: 2004, efficiency: 29.5, sales: 7483000 },\n    { year: 2005, efficiency: 30.3, sales: 7660000 },\n    { year: 2006, efficiency: 30.1, sales: 7762000 },\n    { year: 2007, efficiency: 31.2, sales: 7562000 },\n    { year: 2008, efficiency: 31.5, sales: 6769000 },\n    { year: 2009, efficiency: 32.9, sales: 5402000 },\n    { year: 2010, efficiency: 33.9, sales: 5636000 },\n    { year: 2011, efficiency: 33.1, sales: 6093000 },\n    { year: 2012, efficiency: 35.3, sales: 7245000 },\n    { year: 2013, efficiency: 36.4, sales: 7586000 },\n    { year: 2014, efficiency: 36.5, sales: 7708000 },\n    { year: 2015, efficiency: 37.2, sales: 7517000 },\n    { year: 2016, efficiency: 37.7, sales: 6873000 },\n    { year: 2017, efficiency: 39.4, sales: 6081000 },\n];\nexport default function Tree() {\n    return (React.createElement(\"div\", { className: styles.tree },\n        React.createElement(\"h1\", null, \"This is tree.\"),\n        React.createElement(\"div\", null, JSON.stringify(myTree))));\n}\n","__webpack_require__.h = () => (\"767f77fe9ba24d095067\")"],"sourceRoot":""}